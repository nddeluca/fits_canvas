// Generated by CoffeeScript 1.3.3
(function() {
  var ColorProcessor, Display, FITS, FitsDisplay, ScaleProcessor, colors, scales,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Display = require('./display');

  scales = require('./scales');

  ScaleProcessor = require('./scale_processor');

  colors = require('./colors');

  ColorProcessor = require('./color_processor');

  FITS = require('fits');

  FitsDisplay = (function(_super) {

    __extends(FitsDisplay, _super);

    function FitsDisplay(container, desiredWidth, fitsFile) {
      var fits, image, scaledHeight, scaledWidth, _ref;
      fits = new FITS.File(fitsFile);
      image = fits.getDataUnit();
      this.fitsData = image.getFrame();
      this.fitsWidth = image.width;
      this.fitsHeight = image.height;
      _ref = image.getExtremes(), this.fitsMin = _ref[0], this.fitsMax = _ref[1];
      scaledWidth = ~~desiredWidth;
      this.scaleRatio = this.fitsWidth / scaledWidth;
      scaledHeight = ~~(this.fitsHeight / this.scaleRatio);
      this.buildScaleBuffers();
      this.buildColorBuffers();
      this.scale = scales.linear;
      this.color = colors.grayscale;
      this.scaler = new ScaleProcessor(this.scale);
      this.colorer = new ColorProcessor(this.color);
      FitsDisplay.__super__.constructor.call(this, container, scaledWidth, scaledHeight);
    }

    FitsDisplay.prototype.buildScaleBuffers = function() {
      this.scaleBuffer = new ArrayBuffer(this.fitsWidth * this.fitsHeight);
      return this.scaleView8 = new Uint8ClampedArray(this.scaleBuffer);
    };

    FitsDisplay.prototype.buildColorBuffers = function() {
      this.colorBuffer = new ArrayBuffer(this.fitsWidth * this.fitsHeight * 4);
      this.colorView8 = new Uint8ClampedArray(this.colorBuffer);
      return this.colorView32 = new Uint32Array(this.colorBuffer);
    };

    FitsDisplay.prototype.processImage = function() {
      var x, y, _i, _ref, _results;
      this.scaler.process(this.fitsData, this.scaleView8, this.fitsMin, this.fitsMax);
      this.colorer.process(this.scaleView8, this.colorView32);
      _results = [];
      for (x = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.height - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.displayView32[(this.width * y) + x] = this.colorView32[((this.fitsHeight - 1) - (~~(y * this.scaleRatio))) * this.fitsWidth + (~~(x * this.scaleRatio))]);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return FitsDisplay;

  })(Display);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = FitsDisplay;
  }

}).call(this);
